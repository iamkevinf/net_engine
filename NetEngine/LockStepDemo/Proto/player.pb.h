// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCSLoginImpl();
void InitDefaultsCSLogin();
void InitDefaultsSCLoginImpl();
void InitDefaultsSCLogin();
void InitDefaultsSCFrameInitImpl();
void InitDefaultsSCFrameInit();
void InitDefaultsUserFrameImpl();
void InitDefaultsUserFrame();
void InitDefaultsCSFrameImpl();
void InitDefaultsCSFrame();
void InitDefaultsSCFrameImpl();
void InitDefaultsSCFrame();
inline void InitDefaults() {
  InitDefaultsCSLogin();
  InitDefaultsSCLogin();
  InitDefaultsSCFrameInit();
  InitDefaultsUserFrame();
  InitDefaultsCSFrame();
  InitDefaultsSCFrame();
}
}  // namespace protobuf_player_2eproto
class CSFrame;
class CSFrameDefaultTypeInternal;
extern CSFrameDefaultTypeInternal _CSFrame_default_instance_;
class CSLogin;
class CSLoginDefaultTypeInternal;
extern CSLoginDefaultTypeInternal _CSLogin_default_instance_;
class SCFrame;
class SCFrameDefaultTypeInternal;
extern SCFrameDefaultTypeInternal _SCFrame_default_instance_;
class SCFrameInit;
class SCFrameInitDefaultTypeInternal;
extern SCFrameInitDefaultTypeInternal _SCFrameInit_default_instance_;
class SCLogin;
class SCLoginDefaultTypeInternal;
extern SCLoginDefaultTypeInternal _SCLogin_default_instance_;
class UserFrame;
class UserFrameDefaultTypeInternal;
extern UserFrameDefaultTypeInternal _UserFrame_default_instance_;

// ===================================================================

class CSLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSLogin) */ {
 public:
  CSLogin();
  virtual ~CSLogin();

  CSLogin(const CSLogin& from);

  inline CSLogin& operator=(const CSLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSLogin(CSLogin&& from) noexcept
    : CSLogin() {
    *this = ::std::move(from);
  }

  inline CSLogin& operator=(CSLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSLogin* internal_default_instance() {
    return reinterpret_cast<const CSLogin*>(
               &_CSLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CSLogin* other);
  friend void swap(CSLogin& a, CSLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  CSLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSLogin& from);
  void MergeFrom(const CSLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string PassWord = 2;
  bool has_password() const;
  void clear_password();
  static const int kPassWordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:CSLogin)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_password();
  void clear_has_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsCSLoginImpl();
};
// -------------------------------------------------------------------

class SCLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SCLogin) */ {
 public:
  SCLogin();
  virtual ~SCLogin();

  SCLogin(const SCLogin& from);

  inline SCLogin& operator=(const SCLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SCLogin(SCLogin&& from) noexcept
    : SCLogin() {
    *this = ::std::move(from);
  }

  inline SCLogin& operator=(SCLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCLogin* internal_default_instance() {
    return reinterpret_cast<const SCLogin*>(
               &_SCLogin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SCLogin* other);
  friend void swap(SCLogin& a, SCLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SCLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  SCLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SCLogin& from);
  void MergeFrom(const SCLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SCLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  bool ret() const;
  void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:SCLogin)
 private:
  void set_has_ret();
  void clear_has_ret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool ret_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsSCLoginImpl();
};
// -------------------------------------------------------------------

class SCFrameInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SCFrameInit) */ {
 public:
  SCFrameInit();
  virtual ~SCFrameInit();

  SCFrameInit(const SCFrameInit& from);

  inline SCFrameInit& operator=(const SCFrameInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SCFrameInit(SCFrameInit&& from) noexcept
    : SCFrameInit() {
    *this = ::std::move(from);
  }

  inline SCFrameInit& operator=(SCFrameInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCFrameInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCFrameInit* internal_default_instance() {
    return reinterpret_cast<const SCFrameInit*>(
               &_SCFrameInit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SCFrameInit* other);
  friend void swap(SCFrameInit& a, SCFrameInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SCFrameInit* New() const PROTOBUF_FINAL { return New(NULL); }

  SCFrameInit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SCFrameInit& from);
  void MergeFrom(const SCFrameInit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SCFrameInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 CurFrameID = 1;
  bool has_curframeid() const;
  void clear_curframeid();
  static const int kCurFrameIDFieldNumber = 1;
  ::google::protobuf::uint64 curframeid() const;
  void set_curframeid(::google::protobuf::uint64 value);

  // optional uint64 NxtFrameID = 2;
  bool has_nxtframeid() const;
  void clear_nxtframeid();
  static const int kNxtFrameIDFieldNumber = 2;
  ::google::protobuf::uint64 nxtframeid() const;
  void set_nxtframeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SCFrameInit)
 private:
  void set_has_curframeid();
  void clear_has_curframeid();
  void set_has_nxtframeid();
  void clear_has_nxtframeid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 curframeid_;
  ::google::protobuf::uint64 nxtframeid_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsSCFrameInitImpl();
};
// -------------------------------------------------------------------

class UserFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserFrame) */ {
 public:
  UserFrame();
  virtual ~UserFrame();

  UserFrame(const UserFrame& from);

  inline UserFrame& operator=(const UserFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserFrame(UserFrame&& from) noexcept
    : UserFrame() {
    *this = ::std::move(from);
  }

  inline UserFrame& operator=(UserFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFrame* internal_default_instance() {
    return reinterpret_cast<const UserFrame*>(
               &_UserFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserFrame* other);
  friend void swap(UserFrame& a, UserFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  UserFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserFrame& from);
  void MergeFrom(const UserFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 KeyInfo = 2;
  int keyinfo_size() const;
  void clear_keyinfo();
  static const int kKeyInfoFieldNumber = 2;
  ::google::protobuf::uint32 keyinfo(int index) const;
  void set_keyinfo(int index, ::google::protobuf::uint32 value);
  void add_keyinfo(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keyinfo() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keyinfo();

  // optional uint32 UUID = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  ::google::protobuf::uint32 uuid() const;
  void set_uuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UserFrame)
 private:
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keyinfo_;
  ::google::protobuf::uint32 uuid_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsUserFrameImpl();
};
// -------------------------------------------------------------------

class CSFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSFrame) */ {
 public:
  CSFrame();
  virtual ~CSFrame();

  CSFrame(const CSFrame& from);

  inline CSFrame& operator=(const CSFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSFrame(CSFrame&& from) noexcept
    : CSFrame() {
    *this = ::std::move(from);
  }

  inline CSFrame& operator=(CSFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSFrame* internal_default_instance() {
    return reinterpret_cast<const CSFrame*>(
               &_CSFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CSFrame* other);
  friend void swap(CSFrame& a, CSFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  CSFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSFrame& from);
  void MergeFrom(const CSFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 KeyInfo = 3;
  int keyinfo_size() const;
  void clear_keyinfo();
  static const int kKeyInfoFieldNumber = 3;
  ::google::protobuf::uint32 keyinfo(int index) const;
  void set_keyinfo(int index, ::google::protobuf::uint32 value);
  void add_keyinfo(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keyinfo() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keyinfo();

  // optional uint64 FrameID = 2;
  bool has_frameid() const;
  void clear_frameid();
  static const int kFrameIDFieldNumber = 2;
  ::google::protobuf::uint64 frameid() const;
  void set_frameid(::google::protobuf::uint64 value);

  // optional uint32 UUID = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  ::google::protobuf::uint32 uuid() const;
  void set_uuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CSFrame)
 private:
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_frameid();
  void clear_has_frameid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keyinfo_;
  ::google::protobuf::uint64 frameid_;
  ::google::protobuf::uint32 uuid_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsCSFrameImpl();
};
// -------------------------------------------------------------------

class SCFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SCFrame) */ {
 public:
  SCFrame();
  virtual ~SCFrame();

  SCFrame(const SCFrame& from);

  inline SCFrame& operator=(const SCFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SCFrame(SCFrame&& from) noexcept
    : SCFrame() {
    *this = ::std::move(from);
  }

  inline SCFrame& operator=(SCFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCFrame* internal_default_instance() {
    return reinterpret_cast<const SCFrame*>(
               &_SCFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SCFrame* other);
  friend void swap(SCFrame& a, SCFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SCFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  SCFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SCFrame& from);
  void MergeFrom(const SCFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SCFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserFrame Users = 3;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 3;
  const ::UserFrame& users(int index) const;
  ::UserFrame* mutable_users(int index);
  ::UserFrame* add_users();
  ::google::protobuf::RepeatedPtrField< ::UserFrame >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::UserFrame >&
      users() const;

  // optional uint32 FrameID = 1;
  bool has_frameid() const;
  void clear_frameid();
  static const int kFrameIDFieldNumber = 1;
  ::google::protobuf::uint32 frameid() const;
  void set_frameid(::google::protobuf::uint32 value);

  // optional uint32 NextFrameID = 2;
  bool has_nextframeid() const;
  void clear_nextframeid();
  static const int kNextFrameIDFieldNumber = 2;
  ::google::protobuf::uint32 nextframeid() const;
  void set_nextframeid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SCFrame)
 private:
  void set_has_frameid();
  void clear_has_frameid();
  void set_has_nextframeid();
  void clear_has_nextframeid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::UserFrame > users_;
  ::google::protobuf::uint32 frameid_;
  ::google::protobuf::uint32 nextframeid_;
  friend struct ::protobuf_player_2eproto::TableStruct;
  friend void ::protobuf_player_2eproto::InitDefaultsSCFrameImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSLogin

// optional string UserName = 1;
inline bool CSLogin::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSLogin::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSLogin::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSLogin::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& CSLogin::username() const {
  // @@protoc_insertion_point(field_get:CSLogin.UserName)
  return username_.GetNoArena();
}
inline void CSLogin::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSLogin.UserName)
}
#if LANG_CXX11
inline void CSLogin::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSLogin.UserName)
}
#endif
inline void CSLogin::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSLogin.UserName)
}
inline void CSLogin::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSLogin.UserName)
}
inline ::std::string* CSLogin::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CSLogin.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSLogin::release_username() {
  // @@protoc_insertion_point(field_release:CSLogin.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSLogin::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CSLogin.UserName)
}

// optional string PassWord = 2;
inline bool CSLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CSLogin::password() const {
  // @@protoc_insertion_point(field_get:CSLogin.PassWord)
  return password_.GetNoArena();
}
inline void CSLogin::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSLogin.PassWord)
}
#if LANG_CXX11
inline void CSLogin::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSLogin.PassWord)
}
#endif
inline void CSLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSLogin.PassWord)
}
inline void CSLogin::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSLogin.PassWord)
}
inline ::std::string* CSLogin::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CSLogin.PassWord)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSLogin::release_password() {
  // @@protoc_insertion_point(field_release:CSLogin.PassWord)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CSLogin.PassWord)
}

// -------------------------------------------------------------------

// SCLogin

// optional bool Ret = 1;
inline bool SCLogin::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCLogin::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCLogin::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCLogin::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool SCLogin::ret() const {
  // @@protoc_insertion_point(field_get:SCLogin.Ret)
  return ret_;
}
inline void SCLogin::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:SCLogin.Ret)
}

// -------------------------------------------------------------------

// SCFrameInit

// optional uint64 CurFrameID = 1;
inline bool SCFrameInit::has_curframeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCFrameInit::set_has_curframeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCFrameInit::clear_has_curframeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCFrameInit::clear_curframeid() {
  curframeid_ = GOOGLE_ULONGLONG(0);
  clear_has_curframeid();
}
inline ::google::protobuf::uint64 SCFrameInit::curframeid() const {
  // @@protoc_insertion_point(field_get:SCFrameInit.CurFrameID)
  return curframeid_;
}
inline void SCFrameInit::set_curframeid(::google::protobuf::uint64 value) {
  set_has_curframeid();
  curframeid_ = value;
  // @@protoc_insertion_point(field_set:SCFrameInit.CurFrameID)
}

// optional uint64 NxtFrameID = 2;
inline bool SCFrameInit::has_nxtframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCFrameInit::set_has_nxtframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCFrameInit::clear_has_nxtframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCFrameInit::clear_nxtframeid() {
  nxtframeid_ = GOOGLE_ULONGLONG(0);
  clear_has_nxtframeid();
}
inline ::google::protobuf::uint64 SCFrameInit::nxtframeid() const {
  // @@protoc_insertion_point(field_get:SCFrameInit.NxtFrameID)
  return nxtframeid_;
}
inline void SCFrameInit::set_nxtframeid(::google::protobuf::uint64 value) {
  set_has_nxtframeid();
  nxtframeid_ = value;
  // @@protoc_insertion_point(field_set:SCFrameInit.NxtFrameID)
}

// -------------------------------------------------------------------

// UserFrame

// optional uint32 UUID = 1;
inline bool UserFrame::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFrame::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFrame::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFrame::clear_uuid() {
  uuid_ = 0u;
  clear_has_uuid();
}
inline ::google::protobuf::uint32 UserFrame::uuid() const {
  // @@protoc_insertion_point(field_get:UserFrame.UUID)
  return uuid_;
}
inline void UserFrame::set_uuid(::google::protobuf::uint32 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:UserFrame.UUID)
}

// repeated uint32 KeyInfo = 2;
inline int UserFrame::keyinfo_size() const {
  return keyinfo_.size();
}
inline void UserFrame::clear_keyinfo() {
  keyinfo_.Clear();
}
inline ::google::protobuf::uint32 UserFrame::keyinfo(int index) const {
  // @@protoc_insertion_point(field_get:UserFrame.KeyInfo)
  return keyinfo_.Get(index);
}
inline void UserFrame::set_keyinfo(int index, ::google::protobuf::uint32 value) {
  keyinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:UserFrame.KeyInfo)
}
inline void UserFrame::add_keyinfo(::google::protobuf::uint32 value) {
  keyinfo_.Add(value);
  // @@protoc_insertion_point(field_add:UserFrame.KeyInfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserFrame::keyinfo() const {
  // @@protoc_insertion_point(field_list:UserFrame.KeyInfo)
  return keyinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserFrame::mutable_keyinfo() {
  // @@protoc_insertion_point(field_mutable_list:UserFrame.KeyInfo)
  return &keyinfo_;
}

// -------------------------------------------------------------------

// CSFrame

// optional uint32 UUID = 1;
inline bool CSFrame::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFrame::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFrame::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFrame::clear_uuid() {
  uuid_ = 0u;
  clear_has_uuid();
}
inline ::google::protobuf::uint32 CSFrame::uuid() const {
  // @@protoc_insertion_point(field_get:CSFrame.UUID)
  return uuid_;
}
inline void CSFrame::set_uuid(::google::protobuf::uint32 value) {
  set_has_uuid();
  uuid_ = value;
  // @@protoc_insertion_point(field_set:CSFrame.UUID)
}

// optional uint64 FrameID = 2;
inline bool CSFrame::has_frameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFrame::set_has_frameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFrame::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFrame::clear_frameid() {
  frameid_ = GOOGLE_ULONGLONG(0);
  clear_has_frameid();
}
inline ::google::protobuf::uint64 CSFrame::frameid() const {
  // @@protoc_insertion_point(field_get:CSFrame.FrameID)
  return frameid_;
}
inline void CSFrame::set_frameid(::google::protobuf::uint64 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:CSFrame.FrameID)
}

// repeated uint32 KeyInfo = 3;
inline int CSFrame::keyinfo_size() const {
  return keyinfo_.size();
}
inline void CSFrame::clear_keyinfo() {
  keyinfo_.Clear();
}
inline ::google::protobuf::uint32 CSFrame::keyinfo(int index) const {
  // @@protoc_insertion_point(field_get:CSFrame.KeyInfo)
  return keyinfo_.Get(index);
}
inline void CSFrame::set_keyinfo(int index, ::google::protobuf::uint32 value) {
  keyinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSFrame.KeyInfo)
}
inline void CSFrame::add_keyinfo(::google::protobuf::uint32 value) {
  keyinfo_.Add(value);
  // @@protoc_insertion_point(field_add:CSFrame.KeyInfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSFrame::keyinfo() const {
  // @@protoc_insertion_point(field_list:CSFrame.KeyInfo)
  return keyinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSFrame::mutable_keyinfo() {
  // @@protoc_insertion_point(field_mutable_list:CSFrame.KeyInfo)
  return &keyinfo_;
}

// -------------------------------------------------------------------

// SCFrame

// optional uint32 FrameID = 1;
inline bool SCFrame::has_frameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCFrame::set_has_frameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCFrame::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCFrame::clear_frameid() {
  frameid_ = 0u;
  clear_has_frameid();
}
inline ::google::protobuf::uint32 SCFrame::frameid() const {
  // @@protoc_insertion_point(field_get:SCFrame.FrameID)
  return frameid_;
}
inline void SCFrame::set_frameid(::google::protobuf::uint32 value) {
  set_has_frameid();
  frameid_ = value;
  // @@protoc_insertion_point(field_set:SCFrame.FrameID)
}

// optional uint32 NextFrameID = 2;
inline bool SCFrame::has_nextframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCFrame::set_has_nextframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCFrame::clear_has_nextframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCFrame::clear_nextframeid() {
  nextframeid_ = 0u;
  clear_has_nextframeid();
}
inline ::google::protobuf::uint32 SCFrame::nextframeid() const {
  // @@protoc_insertion_point(field_get:SCFrame.NextFrameID)
  return nextframeid_;
}
inline void SCFrame::set_nextframeid(::google::protobuf::uint32 value) {
  set_has_nextframeid();
  nextframeid_ = value;
  // @@protoc_insertion_point(field_set:SCFrame.NextFrameID)
}

// repeated .UserFrame Users = 3;
inline int SCFrame::users_size() const {
  return users_.size();
}
inline void SCFrame::clear_users() {
  users_.Clear();
}
inline const ::UserFrame& SCFrame::users(int index) const {
  // @@protoc_insertion_point(field_get:SCFrame.Users)
  return users_.Get(index);
}
inline ::UserFrame* SCFrame::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:SCFrame.Users)
  return users_.Mutable(index);
}
inline ::UserFrame* SCFrame::add_users() {
  // @@protoc_insertion_point(field_add:SCFrame.Users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::UserFrame >*
SCFrame::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:SCFrame.Users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::UserFrame >&
SCFrame::users() const {
  // @@protoc_insertion_point(field_list:SCFrame.Users)
  return users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
