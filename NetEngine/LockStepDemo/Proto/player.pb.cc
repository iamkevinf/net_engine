// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

//begin custom modify
#if defined(_MSC_VER)
#pragma warning(disable:4125)
#endif // _MSC_VER
//end custom modify
class CSLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSLogin>
      _instance;
} _CSLogin_default_instance_;
class SCLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SCLogin>
      _instance;
} _SCLogin_default_instance_;
class SCFrameInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SCFrameInit>
      _instance;
} _SCFrameInit_default_instance_;
class UserFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserFrame>
      _instance;
} _UserFrame_default_instance_;
class CSFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSFrame>
      _instance;
} _CSFrame_default_instance_;
class SCFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SCFrame>
      _instance;
} _SCFrame_default_instance_;
namespace protobuf_player_2eproto {
void InitDefaultsCSLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSLogin_default_instance_;
    new (ptr) ::CSLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSLogin::InitAsDefaultInstance();
}

void InitDefaultsCSLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSLoginImpl);
}

void InitDefaultsSCLoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_SCLogin_default_instance_;
    new (ptr) ::SCLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCLogin::InitAsDefaultInstance();
}

void InitDefaultsSCLogin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSCLoginImpl);
}

void InitDefaultsSCFrameInitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_SCFrameInit_default_instance_;
    new (ptr) ::SCFrameInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCFrameInit::InitAsDefaultInstance();
}

void InitDefaultsSCFrameInit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSCFrameInitImpl);
}

void InitDefaultsUserFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_UserFrame_default_instance_;
    new (ptr) ::UserFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserFrame::InitAsDefaultInstance();
}

void InitDefaultsUserFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserFrameImpl);
}

void InitDefaultsCSFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSFrame_default_instance_;
    new (ptr) ::CSFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSFrame::InitAsDefaultInstance();
}

void InitDefaultsCSFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSFrameImpl);
}

void InitDefaultsSCFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_player_2eproto::InitDefaultsUserFrame();
  {
    void* ptr = &::_SCFrame_default_instance_;
    new (ptr) ::SCFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCFrame::InitAsDefaultInstance();
}

void InitDefaultsSCFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSCFrameImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSLogin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSLogin, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSLogin, password_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCLogin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCLogin, ret_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrameInit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrameInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrameInit, curframeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrameInit, nxtframeid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UserFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UserFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UserFrame, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UserFrame, keyinfo_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSFrame, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSFrame, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSFrame, keyinfo_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrame, frameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrame, nextframeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCFrame, users_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CSLogin)},
  { 9, 15, sizeof(::SCLogin)},
  { 16, 23, sizeof(::SCFrameInit)},
  { 25, 32, sizeof(::UserFrame)},
  { 34, 42, sizeof(::CSFrame)},
  { 45, 53, sizeof(::SCFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SCLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SCFrameInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UserFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SCFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "player.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014player.proto\"-\n\007CSLogin\022\020\n\010UserName\030\001 "
      "\001(\t\022\020\n\010PassWord\030\002 \001(\t\"\026\n\007SCLogin\022\013\n\003Ret\030"
      "\001 \001(\010\"5\n\013SCFrameInit\022\022\n\nCurFrameID\030\001 \001(\004"
      "\022\022\n\nNxtFrameID\030\002 \001(\004\"*\n\tUserFrame\022\014\n\004UUI"
      "D\030\001 \001(\r\022\017\n\007KeyInfo\030\002 \003(\r\"9\n\007CSFrame\022\014\n\004U"
      "UID\030\001 \001(\r\022\017\n\007FrameID\030\002 \001(\004\022\017\n\007KeyInfo\030\003 "
      "\003(\r\"J\n\007SCFrame\022\017\n\007FrameID\030\001 \001(\r\022\023\n\013NextF"
      "rameID\030\002 \001(\r\022\031\n\005Users\030\003 \003(\0132\n.UserFrame"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_player_2eproto

// ===================================================================

void CSLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSLogin::kUserNameFieldNumber;
const int CSLogin::kPassWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSLogin::CSLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsCSLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSLogin)
}
CSLogin::CSLogin(const CSLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:CSLogin)
}

void CSLogin::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSLogin::~CSLogin() {
  // @@protoc_insertion_point(destructor:CSLogin)
  SharedDtor();
}

void CSLogin::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSLogin::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSLogin& CSLogin::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsCSLogin();
  return *internal_default_instance();
}

CSLogin* CSLogin::New(::google::protobuf::Arena* arena) const {
  CSLogin* n = new CSLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:CSLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSLogin.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PassWord = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSLogin.PassWord");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSLogin)
  return false;
#undef DO_
}

void CSLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSLogin.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string PassWord = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSLogin.PassWord");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSLogin)
}

::google::protobuf::uint8* CSLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSLogin.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string PassWord = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSLogin.PassWord");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSLogin)
  return target;
}

size_t CSLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string PassWord = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const CSLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSLogin)
    MergeFrom(*source);
  }
}

void CSLogin::MergeFrom(const CSLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
}

void CSLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSLogin::CopyFrom(const CSLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSLogin::IsInitialized() const {
  return true;
}

void CSLogin::Swap(CSLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSLogin::InternalSwap(CSLogin* other) {
  using std::swap;
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSLogin::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SCLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SCLogin::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SCLogin::SCLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsSCLogin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCLogin)
}
SCLogin::SCLogin(const SCLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:SCLogin)
}

void SCLogin::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
}

SCLogin::~SCLogin() {
  // @@protoc_insertion_point(destructor:SCLogin)
  SharedDtor();
}

void SCLogin::SharedDtor() {
}

void SCLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCLogin::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SCLogin& SCLogin::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsSCLogin();
  return *internal_default_instance();
}

SCLogin* SCLogin::New(::google::protobuf::Arena* arena) const {
  SCLogin* n = new SCLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:SCLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SCLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCLogin)
  return false;
#undef DO_
}

void SCLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCLogin)
}

::google::protobuf::uint8* SCLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool Ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCLogin)
  return target;
}

size_t SCLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool Ret = 1;
  if (has_ret()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const SCLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SCLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCLogin)
    MergeFrom(*source);
  }
}

void SCLogin::MergeFrom(const SCLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ret()) {
    set_ret(from.ret());
  }
}

void SCLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCLogin::CopyFrom(const SCLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCLogin::IsInitialized() const {
  return true;
}

void SCLogin::Swap(SCLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCLogin::InternalSwap(SCLogin* other) {
  using std::swap;
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCLogin::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SCFrameInit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SCFrameInit::kCurFrameIDFieldNumber;
const int SCFrameInit::kNxtFrameIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SCFrameInit::SCFrameInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsSCFrameInit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCFrameInit)
}
SCFrameInit::SCFrameInit(const SCFrameInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curframeid_, &from.curframeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nxtframeid_) -
    reinterpret_cast<char*>(&curframeid_)) + sizeof(nxtframeid_));
  // @@protoc_insertion_point(copy_constructor:SCFrameInit)
}

void SCFrameInit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&curframeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nxtframeid_) -
      reinterpret_cast<char*>(&curframeid_)) + sizeof(nxtframeid_));
}

SCFrameInit::~SCFrameInit() {
  // @@protoc_insertion_point(destructor:SCFrameInit)
  SharedDtor();
}

void SCFrameInit::SharedDtor() {
}

void SCFrameInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCFrameInit::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SCFrameInit& SCFrameInit::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsSCFrameInit();
  return *internal_default_instance();
}

SCFrameInit* SCFrameInit::New(::google::protobuf::Arena* arena) const {
  SCFrameInit* n = new SCFrameInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCFrameInit::Clear() {
// @@protoc_insertion_point(message_clear_start:SCFrameInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&curframeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nxtframeid_) -
        reinterpret_cast<char*>(&curframeid_)) + sizeof(nxtframeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SCFrameInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCFrameInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 CurFrameID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_curframeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curframeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 NxtFrameID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nxtframeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nxtframeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCFrameInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCFrameInit)
  return false;
#undef DO_
}

void SCFrameInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCFrameInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 CurFrameID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->curframeid(), output);
  }

  // optional uint64 NxtFrameID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nxtframeid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCFrameInit)
}

::google::protobuf::uint8* SCFrameInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCFrameInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 CurFrameID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->curframeid(), target);
  }

  // optional uint64 NxtFrameID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nxtframeid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCFrameInit)
  return target;
}

size_t SCFrameInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCFrameInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 CurFrameID = 1;
    if (has_curframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curframeid());
    }

    // optional uint64 NxtFrameID = 2;
    if (has_nxtframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nxtframeid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCFrameInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCFrameInit)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFrameInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SCFrameInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCFrameInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCFrameInit)
    MergeFrom(*source);
  }
}

void SCFrameInit::MergeFrom(const SCFrameInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCFrameInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      curframeid_ = from.curframeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nxtframeid_ = from.nxtframeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SCFrameInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCFrameInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFrameInit::CopyFrom(const SCFrameInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCFrameInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFrameInit::IsInitialized() const {
  return true;
}

void SCFrameInit::Swap(SCFrameInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCFrameInit::InternalSwap(SCFrameInit* other) {
  using std::swap;
  swap(curframeid_, other->curframeid_);
  swap(nxtframeid_, other->nxtframeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCFrameInit::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserFrame::kUUIDFieldNumber;
const int UserFrame::kKeyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserFrame::UserFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsUserFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserFrame)
}
UserFrame::UserFrame(const UserFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keyinfo_(from.keyinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_ = from.uuid_;
  // @@protoc_insertion_point(copy_constructor:UserFrame)
}

void UserFrame::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = 0u;
}

UserFrame::~UserFrame() {
  // @@protoc_insertion_point(destructor:UserFrame)
  SharedDtor();
}

void UserFrame::SharedDtor() {
}

void UserFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserFrame::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserFrame& UserFrame::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsUserFrame();
  return *internal_default_instance();
}

UserFrame* UserFrame::New(::google::protobuf::Arena* arena) const {
  UserFrame* n = new UserFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:UserFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyinfo_.Clear();
  uuid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UUID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 KeyInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_keyinfo())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keyinfo())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserFrame)
  return false;
#undef DO_
}

void UserFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 UUID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuid(), output);
  }

  // repeated uint32 KeyInfo = 2;
  for (int i = 0, n = this->keyinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->keyinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserFrame)
}

::google::protobuf::uint8* UserFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UserFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 UUID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuid(), target);
  }

  // repeated uint32 KeyInfo = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->keyinfo_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserFrame)
  return target;
}

size_t UserFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 KeyInfo = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->keyinfo_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keyinfo_size());
    total_size += data_size;
  }

  // optional uint32 UUID = 1;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserFrame)
    MergeFrom(*source);
  }
}

void UserFrame::MergeFrom(const UserFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyinfo_.MergeFrom(from.keyinfo_);
  if (from.has_uuid()) {
    set_uuid(from.uuid());
  }
}

void UserFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFrame::CopyFrom(const UserFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFrame::IsInitialized() const {
  return true;
}

void UserFrame::Swap(UserFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserFrame::InternalSwap(UserFrame* other) {
  using std::swap;
  keyinfo_.InternalSwap(&other->keyinfo_);
  swap(uuid_, other->uuid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserFrame::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSFrame::kUUIDFieldNumber;
const int CSFrame::kFrameIDFieldNumber;
const int CSFrame::kKeyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSFrame::CSFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsCSFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSFrame)
}
CSFrame::CSFrame(const CSFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keyinfo_(from.keyinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uuid_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(uuid_));
  // @@protoc_insertion_point(copy_constructor:CSFrame)
}

void CSFrame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uuid_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(uuid_));
}

CSFrame::~CSFrame() {
  // @@protoc_insertion_point(destructor:CSFrame)
  SharedDtor();
}

void CSFrame::SharedDtor() {
}

void CSFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFrame::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSFrame& CSFrame::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsCSFrame();
  return *internal_default_instance();
}

CSFrame* CSFrame::New(::google::protobuf::Arena* arena) const {
  CSFrame* n = new CSFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:CSFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&frameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uuid_) -
        reinterpret_cast<char*>(&frameid_)) + sizeof(uuid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UUID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 FrameID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 KeyInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_keyinfo())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keyinfo())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSFrame)
  return false;
#undef DO_
}

void CSFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 UUID = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuid(), output);
  }

  // optional uint64 FrameID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frameid(), output);
  }

  // repeated uint32 KeyInfo = 3;
  for (int i = 0, n = this->keyinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->keyinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSFrame)
}

::google::protobuf::uint8* CSFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 UUID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuid(), target);
  }

  // optional uint64 FrameID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->frameid(), target);
  }

  // repeated uint32 KeyInfo = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->keyinfo_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSFrame)
  return target;
}

size_t CSFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 KeyInfo = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->keyinfo_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keyinfo_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 FrameID = 2;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frameid());
    }

    // optional uint32 UUID = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CSFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSFrame)
    MergeFrom(*source);
  }
}

void CSFrame::MergeFrom(const CSFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyinfo_.MergeFrom(from.keyinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_ = from.uuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFrame::CopyFrom(const CSFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFrame::IsInitialized() const {
  return true;
}

void CSFrame::Swap(CSFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSFrame::InternalSwap(CSFrame* other) {
  using std::swap;
  keyinfo_.InternalSwap(&other->keyinfo_);
  swap(frameid_, other->frameid_);
  swap(uuid_, other->uuid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSFrame::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SCFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SCFrame::kFrameIDFieldNumber;
const int SCFrame::kNextFrameIDFieldNumber;
const int SCFrame::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SCFrame::SCFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_player_2eproto::InitDefaultsSCFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCFrame)
}
SCFrame::SCFrame(const SCFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextframeid_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(nextframeid_));
  // @@protoc_insertion_point(copy_constructor:SCFrame)
}

void SCFrame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextframeid_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(nextframeid_));
}

SCFrame::~SCFrame() {
  // @@protoc_insertion_point(destructor:SCFrame)
  SharedDtor();
}

void SCFrame::SharedDtor() {
}

void SCFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCFrame::descriptor() {
  ::protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SCFrame& SCFrame::default_instance() {
  ::protobuf_player_2eproto::InitDefaultsSCFrame();
  return *internal_default_instance();
}

SCFrame* SCFrame::New(::google::protobuf::Arena* arena) const {
  SCFrame* n = new SCFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SCFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&frameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nextframeid_) -
        reinterpret_cast<char*>(&frameid_)) + sizeof(nextframeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SCFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FrameID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_frameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NextFrameID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nextframeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextframeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UserFrame Users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCFrame)
  return false;
#undef DO_
}

void SCFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 FrameID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frameid(), output);
  }

  // optional uint32 NextFrameID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextframeid(), output);
  }

  // repeated .UserFrame Users = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->users(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCFrame)
}

::google::protobuf::uint8* SCFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 FrameID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frameid(), target);
  }

  // optional uint32 NextFrameID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextframeid(), target);
  }

  // repeated .UserFrame Users = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCFrame)
  return target;
}

size_t SCFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .UserFrame Users = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 FrameID = 1;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional uint32 NextFrameID = 2;
    if (has_nextframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextframeid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SCFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SCFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCFrame)
    MergeFrom(*source);
  }
}

void SCFrame::MergeFrom(const SCFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      frameid_ = from.frameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nextframeid_ = from.nextframeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SCFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCFrame::CopyFrom(const SCFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCFrame::IsInitialized() const {
  return true;
}

void SCFrame::Swap(SCFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCFrame::InternalSwap(SCFrame* other) {
  using std::swap;
  users_.InternalSwap(&other->users_);
  swap(frameid_, other->frameid_);
  swap(nextframeid_, other->nextframeid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCFrame::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_player_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
